#!/bin/bash
package='XePersian LaTeX Template Generator'
skipped_files=false;
function __error()  { echo -e "\e[31m$1\n[ ABORT ]\e[m"; exit 0; }
function __log()    { echo -e "\e[33m$1\e[m"; }
function __success(){ echo -e "\e[32m$1\e[m"; }
function __output()  { local txt; txt="$1"; if [ "${#txt}" -ne 0 ]; then echo -e "$txt"; fi }
function __dieOnEmpty() { local VAL=$1; local OPT=$2; [[ -z "${VAL}" || "${VAL}" =~ ^[[:space:]]*$ || "${VAL}" == -* ]] && { echo -e "\n  ERROR: Missing argument for option: -${OPT}\n" >&2; exit 1; } }
function __fileAdded() { echo -e "    \e[32m+\e[m $1"; }
function __fileSkipped() { skipped_files=true; echo -e "    \e[33m[SKIPPED]\e[m $1"; }
# flag force opt to false by default
force=false
update=false
# extract and process options
while getopts 'fp:uh' flag; do
    case "${flag}" in
        # the force flag
        f) force=true ;;
        # the paper template flag
        p)
            __dieOnEmpty "${OPTARG}" "${flag}"
            paper="${OPTARG%.*}" ;;
        u)  update=true ;;
        # output help
        h) 
            echo "$package"
            echo " "
            echo "options:"
            echo "  -h                      Show a brief help"
            echo "  -f                      Enforce overwite the possible existed files"
            echo "  -p PAPER_NAME           Creates paper template file"
            echo "  -u                      Update XLT from its online repository"
            exit 0 ;;
        # anything else
        *)
            bash ${BASH_SOURCE[0]} -h 
            exit 1 ;;
    esac
done
# the default main latex template file's extension  
template_extension='template.tex'
# script absolute path
SCRIPT_ABSOLUTE_PATH=$(cd `dirname "${BASH_SOURCE[0]}"` && pwd)
# check if updating the XLT?
if $update ; then
    # validate the existance of git folder
    if ! [[ -e "$SCRIPT_ABSOLUTE_PATH/../.git" ]]; then
        __error "No git repository found...";
    fi
    # save current pwd
    cpwd=`pwd`
    # change directory to XLT root directory
    cd "$SCRIPT_ABSOLUTE_PATH/.."
    # stash all changes
    git stash
    # pull updates
    git pull
    # assign executable bit to newly updated repo
    chmod +x $SCRIPT_ABSOLUTE_PATH -R 
    # change to previous pwd directory
    cd $cpwd
    # WE DO NOT EXIT HERE ALLOWING SCRIPT TO CONTINUE WITH OTHER POSSIBLE OPTIONS
fi 
# check if {paper tamplate} has been requested
if ! [[ -z "$paper" ]]; then
    # initiate a acknowledgement of the commend
    __output "Creating \"\e[33m$paper.tex\e[m\" paper...\n"
    # safe-copy the main latex template file
    (! [[ -e $paper.tex ]] || $force ) && cp "$SCRIPT_ABSOLUTE_PATH/../paper/paper.$template_extension" $paper.tex 2>/dev/null && __fileAdded $paper.tex || __fileSkipped $paper.tex
    # for each file except main latex template file
    for file in $(ls $SCRIPT_ABSOLUTE_PATH/../paper -I "paper.$template_extension" -I "*.pdf"); do
        # perform a safe-copy
        if ! [ -e $file ] || $force ; then
            cp "$SCRIPT_ABSOLUTE_PATH/../paper/$file" $file 2>/dev/null && __fileAdded $file || __fileSkipped $file
        else
            __fileSkipped $file
            skipped=$((skipped +1))
        fi
    done
    # if there were any skipped file 
    if $skipped_files ; then
        # promt a tip
        __log "\nNot all files have been copied; use '-f' to force overwite.";
    fi
    # done
    exit 0
fi
# output help statement
bash ${BASH_SOURCE[0]} -h
exit 1;
